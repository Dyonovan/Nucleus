buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

//apply plugin: 'maven-publish'
apply plugin: 'maven'

String APIToken = ''
if (file('APIToken').exists()) {
    APIToken = new File('APIToken').text
}

String build = ""
if (project.hasProperty("password")) {
    build = "B" + project.ext["build.number"]
}
if (build == null || build == '') {
    version = "${project.minecraft_version}-${project.mod_version}"
} else {
    version = "${project.minecraft_version}-${project.mod_version}-" + build
}


group= "com.teambr.nucleus" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Nucleus"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
}

minecraft {
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                nucleus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                nucleus {
                    source sourceSets.main
                }
            }
        }

        mappings channel: 'snapshot', version: project.MAPPINGS
//    makeObfSourceJar = false
    }
}

configurations {
    deployerJars
}
dependencies {
    minecraft 'net.minecraftforge:forge:1.16.2-' + project.forge_version
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.8'
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version and mcversion
        expand 'version': project.version
    }

    // copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml', '**/psd/**'
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }
    extension = 'jar'
    classifier = 'dev'
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Zip, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task sourceJarJava(type: Jar, dependsOn: "classes") {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives devJar
    archives sourceJarJava
    archives javadocJar
    archives deobfJar
}

configurations {
    deployerJars
}

repositories {
    mavenCentral()
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

uploadArchives {
    if (project.hasProperty("password")) {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: "scp://dyonovan.com/srv/http/maven2") {
                    authentication(userName: "http", password: "${password}")
                }

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName

                    pom.project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Nucleus'
                        url 'https://github.com/TeamBR-Modding/Nucleus'
                        scm {
                            url 'https://github.com/TeamBR-Modding/Nucleus'
                            connection 'scm:git:git@github.com/TeamBR-Modding/Nucleus.git'
                            developerConnection 'scm:git:git@github.com/TeamBR-Modding/Nucleus.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/TeamBR-Modding/Nucleus/issues'
                        }
                        licenses {
                            license {
                                name 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License'
                                url 'http://creativecommons.org/licenses/by-nc-sa/4.0/'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'Dyonovan'
                                name 'Dyonovan'
                                roles {
                                    role 'developer'
                                }
                            }
                            developer {
                                id 'pauljoda'
                                name 'pauljoda'
                                roles {
                                    role 'developer'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "TeamBRModding",
                "Specification-Version": "${version}",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"TeamBRModding",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}
